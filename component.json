{
    "title": "Flat",
    "description": "The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:\n\n* Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files\n* Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI)\n* Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.\n\nThe Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body.\nThe [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/).\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).\n\nYou can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).\n\nGetting Started and learn more:\n\n* [API Overview and interoduction](https://flat.io/developers/docs/api/)\n* [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html)\n* [SDKs](https://flat.io/developers/docs/api/sdks.html)\n* [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html)\n* [Changelog](https://flat.io/developers/docs/api/changelog.html)\n",
    "docsUrl": "",
    "url": "https://api.apis.guru/v2/specs/flat.io/2.7.0/swagger.json",
    "envVars": {
        "OAUTH_CLIENT_ID": {
            "description": "OAuth Client ID"
        },
        "OAUTH_CLIENT_SECRET": {
            "description": "OAuth Client Secret"
        }
    },
    "credentials": {
        "fields": {
            "server": {
                "label": "Server",
                "viewClass": "SelectView",
                "model": [
                    "https://api.flat.io/v2",
                    "--- Custom URL"
                ],
                "required": true
            },
            "otherServer": {
                "label": "Custom Server URL",
                "viewClass": "TextFieldView"
            },
            "oauth2": {
                "label": "OAuth 2.0 authentication for your app or. Please only request the most restrictive and needed scopes. Using some of the scopes may require an additional review from our team. The Flat API supports **authorization code** and **implicit** flows.\n",
                "viewClass": "OAuthFieldView"
            }
        },
        "oauth2": {
            "client_id": "{{OAUTH_CLIENT_ID}}",
            "client_secret": "{{OAUTH_CLIENT_SECRET}}",
            "auth_uri": "https://flat.io/auth/oauth",
            "token_uri": "https://api.flat.io/oauth/access_token",
            "scopes": [
                "account.education_profile",
                "account.email",
                "account.public_profile",
                "collections",
                "collections.add_scores",
                "collections.readonly",
                "edu.admin",
                "edu.admin.lti",
                "edu.admin.lti.readonly",
                "edu.admin.users",
                "edu.admin.users.readonly",
                "edu.assignments",
                "edu.assignments.readonly",
                "edu.classes",
                "edu.classes.readonly",
                "scores",
                "scores.readonly",
                "scores.social"
            ]
        }
    },
    "triggers": {
        "startFlow": {
            "main": "./lib/triggers/startFlow.js",
            "type": "polling",
            "title": "Start Flow",
            "fields": {}
        }
    },
    "actions": {
        "listClasses": {
            "main": "./lib/actions/listClasses.js",
            "title": "List the classes available for the current user",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/listClasses.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "createClass": {
            "main": "./lib/actions/createClass.js",
            "title": "Create a new class",
            "description": "Classrooms on Flat allow you to create activities with assignments and post content to a specific group.\n\nWhen creating a class, Flat automatically creates two groups: one for the teachers of the course, one for the students. The creator of this class is automatically added to the teachers group.\n\nIf the classsroom is synchronized with another application like Google Classroom, some of the meta information will automatically be updated.\n\nYou can add users to this class using `POST /classes/{class}/users/{user}`, they will automatically added to the group based on their role on Flat. Users can also enroll themselves to this class using `POST /classes/enroll/{enrollmentCode}` and the `enrollmentCode` returned in the `ClassDetails` response.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/createClass.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "enrollClass": {
            "main": "./lib/actions/enrollClass.js",
            "title": "Join a class",
            "description": "Use this method to join a class using an enrollment code given one of the teacher of this class. This code is also available in the `ClassDetails` returned to the teachers when creating the class or listing / fetching a specific class.\n\nFlat will automatically add the user to the corresponding class group based on this role in the organization.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/enrollClass.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "getClass": {
            "main": "./lib/actions/getClass.js",
            "title": "Get the details of a single class",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/getClass.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "updateClass": {
            "main": "./lib/actions/updateClass.js",
            "title": "Update the class",
            "description": "Update the meta information of the class\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/updateClass.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "activateClass": {
            "main": "./lib/actions/activateClass.js",
            "title": "Activate the class",
            "description": "Mark the class as `active`. This is mainly used for classes synchronized from Clever that are initially with an `inactive` state and hidden in the UI.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/activateClass.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "unarchiveClass": {
            "main": "./lib/actions/unarchiveClass.js",
            "title": "Unarchive the class",
            "description": "Mark the class as `active`. When this course is synchronized with another app, like Google Classroom, this state will be automatically be updated.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/unarchiveClass.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "archiveClass": {
            "main": "./lib/actions/archiveClass.js",
            "title": "Archive the class",
            "description": "Mark the class as `archived`. When this course is synchronized with another app, like Google Classroom, this state will be automatically be updated.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/archiveClass.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "listAssignments": {
            "main": "./lib/actions/listAssignments.js",
            "title": "Assignments listing",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/listAssignments.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "createAssignment": {
            "main": "./lib/actions/createAssignment.js",
            "title": "Assignment creation",
            "description": "Use this method as a teacher to create and post a new assignment to a class.\n\nIf the class is synchronized with Google Classroom, the assignment will be automatically posted to your Classroom course.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/createAssignment.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "copyAssignment": {
            "main": "./lib/actions/copyAssignment.js",
            "title": "Copy an assignment",
            "description": "Copy an assignment to a specified class.\n\nIf the original assignment has a due date in the past, this new assingment will be created without a due date.\n\nIf the new class is synchronized with an external app (e.g. Google Classroom), the copied assignment will also be posted on the external app.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/copyAssignment.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "getSubmissions": {
            "main": "./lib/actions/getSubmissions.js",
            "title": "List the students' submissions",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/getSubmissions.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "createSubmission": {
            "main": "./lib/actions/createSubmission.js",
            "title": "Create or edit a submission",
            "description": "Use this method as a student to create, update and submit a submission related to an assignment. Students can only set `attachments`, `studentComment` and `submit`.\n\nTeachers can use `PUT /classes/{class}/assignments/{assignment}/submissions/{submission}` to update a submission by id.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/createSubmission.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "getSubmission": {
            "main": "./lib/actions/getSubmission.js",
            "title": "Get a student submission",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/getSubmission.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "editSubmission": {
            "main": "./lib/actions/editSubmission.js",
            "title": "Edit a submission",
            "description": "Use this method as a teacher to update the different submission and give feedback.\nTeachers can only set `returnFeedback`\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/editSubmission.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "listClassStudentSubmissions": {
            "main": "./lib/actions/listClassStudentSubmissions.js",
            "title": "List the submissions for a student",
            "description": "Use this method as a teacher to list all the assignment submissions sent by a student of the class\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/listClassStudentSubmissions.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "deleteClassUser": {
            "main": "./lib/actions/deleteClassUser.js",
            "title": "Remove a user from the class",
            "description": "This method can be used by a teacher to remove a user from the class, or by a student to leave the classroom.\n\nWarning: Removing a user from the class will remove the associated resources, including the submissions and feedback related to these submissions.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/deleteClassUser.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "addClassUser": {
            "main": "./lib/actions/addClassUser.js",
            "title": "Add a user to the class",
            "description": "This method can be used by a teacher of the class to enroll another Flat user into the class.\n\nOnly users that are part of your Organization can be enrolled in a class of this same Organization.\n\nWhen enrolling a user in the class, Flat will automatically add this user to the corresponding Class group, based on this role in the Organization.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/addClassUser.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "listCollections": {
            "main": "./lib/actions/listCollections.js",
            "title": "List the collections",
            "description": "Use this method to list the user's collections contained in `parent` (by default in the `root` collection).\nIf no sort option is provided, the collections are sorted by `creationDate` `desc`.\n\nNote that this method will not include the `parent` collection in the listing.\nFor example, if you need the details of the `root` collection, you can use `GET /v2/collections/root`.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/listCollections.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "createCollection": {
            "main": "./lib/actions/createCollection.js",
            "title": "Create a new collection",
            "description": "This method will create a new collection and add it to your `root` collection.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/createCollection.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "deleteCollection": {
            "main": "./lib/actions/deleteCollection.js",
            "title": "Delete the collection",
            "description": "This method will schedule the deletion of the collection. Until deleted, the collection will be available in the `trash`.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/deleteCollection.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "getCollection": {
            "main": "./lib/actions/getCollection.js",
            "title": "Get collection details",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/getCollection.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "editCollection": {
            "main": "./lib/actions/editCollection.js",
            "title": "Update a collection's metadata",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/editCollection.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "listCollectionScores": {
            "main": "./lib/actions/listCollectionScores.js",
            "title": "List the scores contained in a collection",
            "description": "Use this method to list the scores contained in a collection.\nIf no sort option is provided, the scores are sorted by `modificationDate` `desc`.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/listCollectionScores.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "deleteScoreFromCollection": {
            "main": "./lib/actions/deleteScoreFromCollection.js",
            "title": "Delete a score from the collection",
            "description": "This method will delete a score from the collection. Unlike [`DELETE /scores/{score}`](#operation/deleteScore), this score will not remove the score from your account, but only from the collection.\nThis can be used to *move* a score from one collection to another, or simply remove a score from one collection when this one is contained in multiple collections.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/deleteScoreFromCollection.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "addScoreToCollection": {
            "main": "./lib/actions/addScoreToCollection.js",
            "title": "Add a score to the collection",
            "description": "This operation will add a score to a collection. The default behavior will make the score available across multiple collections.\nYou must have the capability `canAddScores` on the provided `collection` to perform the action.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/addScoreToCollection.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "untrashCollection": {
            "main": "./lib/actions/untrashCollection.js",
            "title": "Untrash a collection",
            "description": "This method will restore the collection by removing it from the `trash` and add it back to the `root` collection.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/untrashCollection.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "getGroupDetails": {
            "main": "./lib/actions/getGroupDetails.js",
            "title": "Get group information",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/getGroupDetails.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "getGroupScores": {
            "main": "./lib/actions/getGroupScores.js",
            "title": "List group's scores",
            "description": "Get the list of scores shared with a group.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/getGroupScores.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "listGroupUsers": {
            "main": "./lib/actions/listGroupUsers.js",
            "title": "List group's users",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/listGroupUsers.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "getAuthenticatedUser": {
            "main": "./lib/actions/getAuthenticatedUser.js",
            "title": "Get current user profile",
            "description": "Get details about the current authenticated User.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/getAuthenticatedUser.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "listOrganizationInvitations": {
            "main": "./lib/actions/listOrganizationInvitations.js",
            "title": "List the organization invitations",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/listOrganizationInvitations.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "createOrganizationInvitation": {
            "main": "./lib/actions/createOrganizationInvitation.js",
            "title": "Create a new invitation to join the organization",
            "description": "This method creates and sends invitation for teachers and admins.\n\nInvitations can only be used by new Flat users or users who are not part of the organization yet.\n\nIf the email of the user is already associated to a user of your organization, the API will simply update the role of the existing user and won't send an invitation. In this case, the property `usedBy` will be directly filled with the uniquer identifier of the corresponding user.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/createOrganizationInvitation.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "removeOrganizationInvitation": {
            "main": "./lib/actions/removeOrganizationInvitation.js",
            "title": "Remove an organization invitation",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/removeOrganizationInvitation.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "listLtiCredentials": {
            "main": "./lib/actions/listLtiCredentials.js",
            "title": "List LTI 1.x credentials",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/listLtiCredentials.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "createLtiCredentials": {
            "main": "./lib/actions/createLtiCredentials.js",
            "title": "Create a new couple of LTI 1.x credentials",
            "description": "Flat for Education is a Certified LTI Provider. You can use these API methods to automate the creation of LTI credentials. You can read more about our LTI implementation, supported components and LTI Endpoints in our [Developer Documentation](https://flat.io/developers/docs/lti/).\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/createLtiCredentials.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "revokeLtiCredentials": {
            "main": "./lib/actions/revokeLtiCredentials.js",
            "title": "Revoke LTI 1.x credentials",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/revokeLtiCredentials.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "listOrganizationUsers": {
            "main": "./lib/actions/listOrganizationUsers.js",
            "title": "List the organization users",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/listOrganizationUsers.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "createOrganizationUser": {
            "main": "./lib/actions/createOrganizationUser.js",
            "title": "Create a new user account",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/createOrganizationUser.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "removeOrganizationUser": {
            "main": "./lib/actions/removeOrganizationUser.js",
            "title": "Remove an account from Flat",
            "description": "This operation removes an account from Flat and its data, including:\n* The music scores created by this user (documents, history, comments, collaboration information)\n* Education related data (assignments and classroom information)\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/removeOrganizationUser.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "updateOrganizationUser": {
            "main": "./lib/actions/updateOrganizationUser.js",
            "title": "Update account information",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/updateOrganizationUser.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "createScore": {
            "main": "./lib/actions/createScore.js",
            "title": "Create a new score",
            "description": "Use this API method to **create a new music score in the current User account**. You will need a MusicXML 3 (`vnd.recordare.musicxml` or `vnd.recordare.musicxml+xml`), a MIDI (`audio/midi`), Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar, or MuseScore file to create the new Flat document.\n\nThis API call will automatically create the first revision of the document, the score can be modified by the using our web application or by uploading a new revision of this file (`POST /v2/scores/{score}/revisions/{revision}`).\n\nThe currently authenticated user will be granted owner of the file and will be able to add other collaborators (users and groups).\n\nIf no `collection` is specified, the API will create the score in the most appropriate collection. This can be the `root` collection or a different collection based on the user's settings or API authentication method.\nIf a `collection` is specified and this one has more public privacy settings than the score (e.g. `public` vs `private` for the score), the privacy settings of the created score will be adjusted to the collection ones.\nYou can check the adjusted privacy settings in the returned score `privacy`, and optionally adjust these settings if needed using `PUT /scores/{score}`.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/createScore.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "deleteScore": {
            "main": "./lib/actions/deleteScore.js",
            "title": "Delete a score",
            "description": "This method can be used by the owner/admin (`aclAdmin` rights) of a score as well as regular collaborators.\n\nWhen called by an owner/admin, it will schedule the deletion of the score, its revisions, and complete history.\nThe score won't be accessible anymore after calling this method and the user's quota will directly be updated.\n\nWhen called by a regular collaborator (`aclRead` / `aclWrite`), the score will be unshared (i.e. removed from the account & own collections).\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/deleteScore.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "getScore": {
            "main": "./lib/actions/getScore.js",
            "title": "Get a score's metadata",
            "description": "Get the details of a score identified by the `score` parameter in the URL.\nThe currently authenticated user must have at least a read access to the document to use this API call.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/getScore.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "editScore": {
            "main": "./lib/actions/editScore.js",
            "title": "Edit a score's metadata",
            "description": "This API method allows you to change the metadata of a score document (e.g. its `title` or `privacy`), all the properties are optional.\n\nTo edit the file itself, create a new revision using the appropriate method (`POST /v2/scores/{score}/revisions/{revision}`).\n\nWhen editing the `title` of the score, the API metadata are updated directly when calling this method, unlike the data itself.\nThe title in the score data will be \"lazy\" updated at the next score save with the editor or our internal save.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/editScore.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "getScoreCollaborators": {
            "main": "./lib/actions/getScoreCollaborators.js",
            "title": "List the collaborators",
            "description": "This API call will list the different collaborators of a score and their rights on the document. The returned list will at least contain the owner of the document.\n\nCollaborators can be a single user (the object `user` will be populated) or a group (the object `group` will be populated).\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/getScoreCollaborators.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "addScoreCollaborator": {
            "main": "./lib/actions/addScoreCollaborator.js",
            "title": "Add a new collaborator",
            "description": "Share a score with a single user or a group. This API call allows to add, invite and update the collaborators of a resource.\n- To add an existing Flat user to the resource, specify its unique identifier in the `user` property.\n- To invite an external user to the resource, specify its email in the `userEmail` property.\n- To add a Flat group to the resource, specify its unique identifier in the `group` property.\n- To update an existing collaborator, process the same request with different rights.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/addScoreCollaborator.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "removeScoreCollaborator": {
            "main": "./lib/actions/removeScoreCollaborator.js",
            "title": "Delete a collaborator",
            "description": "Remove the specified collaborator from the score\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/removeScoreCollaborator.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "getScoreCollaborator": {
            "main": "./lib/actions/getScoreCollaborator.js",
            "title": "Get a collaborator",
            "description": "Get the information about a collaborator (User or Group).\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/getScoreCollaborator.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "getScoreComments": {
            "main": "./lib/actions/getScoreComments.js",
            "title": "List comments",
            "description": "This method lists the different comments added on a music score (documents and inline) sorted by their post dates.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/getScoreComments.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "postScoreComment": {
            "main": "./lib/actions/postScoreComment.js",
            "title": "Post a new comment",
            "description": "Post a document or a contextualized comment on a document.\n\nPlease note that this method includes an anti-spam system for public scores. We don't guarantee that your comments will be accepted and displayed to end-user. Comments are be blocked by returning a `403` HTTP error and hidden from other users when the `spam` property is `true`.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/postScoreComment.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "deleteScoreComment": {
            "main": "./lib/actions/deleteScoreComment.js",
            "title": "Delete a comment",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/deleteScoreComment.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "updateScoreComment": {
            "main": "./lib/actions/updateScoreComment.js",
            "title": "Update an existing comment",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/updateScoreComment.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "markScoreCommentUnresolved": {
            "main": "./lib/actions/markScoreCommentUnresolved.js",
            "title": "Mark the comment as unresolved",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/markScoreCommentUnresolved.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "markScoreCommentResolved": {
            "main": "./lib/actions/markScoreCommentResolved.js",
            "title": "Mark the comment as resolved",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/markScoreCommentResolved.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "forkScore": {
            "main": "./lib/actions/forkScore.js",
            "title": "Fork a score",
            "description": "This API call will make a copy of the last revision of the specified score and create a new score. The copy of the score will have a privacy set to `private`.\n\nWhen using a [Flat for Education](https://flat.io/edu) account, the inline and contextualized comments will be accessible in the child document.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/forkScore.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "getScoreRevisions": {
            "main": "./lib/actions/getScoreRevisions.js",
            "title": "List the revisions",
            "description": "When creating a score or saving a new version of a score, a revision is created in our storage. This method allows you to list all of them, sorted by last modification.\n\nDepending the plan of the account, this list can be trunked to the few last revisions.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/getScoreRevisions.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "createScoreRevision": {
            "main": "./lib/actions/createScoreRevision.js",
            "title": "Create a new revision",
            "description": "Update a score by uploading a new revision for this one.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/createScoreRevision.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "getScoreRevision": {
            "main": "./lib/actions/getScoreRevision.js",
            "title": "Get a score revision",
            "description": "When creating a score or saving a new version of a score, a revision is created in our storage. This method allows you to get a specific\nrevision metadata.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/getScoreRevision.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "getScoreRevisionData": {
            "main": "./lib/actions/getScoreRevisionData.js",
            "title": "Get a score revision data",
            "description": "Retrieve the file corresponding to a score revision (the following formats are available: Flat JSON/Adagio JSON `json`, MusicXML\n`mxl`/`xml`, MP3 `mp3`, WAV `wav`, MIDI `midi`, or a tumbnail of the first page `thumbnail.png`).\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/getScoreRevisionData.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "getScoreSubmissions": {
            "main": "./lib/actions/getScoreSubmissions.js",
            "title": "List submissions related to the score",
            "description": "This API call will list the different assignments submissions where the score is attached. This method can be used by anyone that are part of the organization and have at least read access to the document.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/getScoreSubmissions.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "listScoreTracks": {
            "main": "./lib/actions/listScoreTracks.js",
            "title": "List the audio or video tracks linked to a score",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/listScoreTracks.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "addScoreTrack": {
            "main": "./lib/actions/addScoreTrack.js",
            "title": "Add a new video or audio track to the score",
            "description": "Use this method to add new track to the score. This track can then be played on flat.io or in an embedded score.\nThis API method support medias hosted on SoundCloud, YouTube and Vimeo.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/addScoreTrack.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "deleteScoreTrack": {
            "main": "./lib/actions/deleteScoreTrack.js",
            "title": "Remove an audio or video track linked to the score",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/deleteScoreTrack.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "getScoreTrack": {
            "main": "./lib/actions/getScoreTrack.js",
            "title": "Retrieve the details of an audio or video track linked to a score",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/getScoreTrack.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "updateScoreTrack": {
            "main": "./lib/actions/updateScoreTrack.js",
            "title": "Update an audio or video track linked to a score",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/updateScoreTrack.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "untrashScore": {
            "main": "./lib/actions/untrashScore.js",
            "title": "Untrash a score",
            "description": "This method will remove the score from the `trash` collection and from the deletion queue, and add it back to the original collections.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/untrashScore.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "getUser": {
            "main": "./lib/actions/getUser.js",
            "title": "Get a public user profile",
            "description": "Get a public profile of a Flat User.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/getUser.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "gerUserLikes": {
            "main": "./lib/actions/gerUserLikes.js",
            "title": "List liked scores",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/gerUserLikes.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "getUserScores": {
            "main": "./lib/actions/getUserScores.js",
            "title": "List user's scores",
            "description": "Get the list of public scores owned by a User.\n\n**DEPRECATED**: Please note that the current behavior will be deprecrated on **2019-01-01**.\nThis method will no longer list private and shared scores, but only public scores of a Flat account.\nIf you want to access to private scores, please use the [Collections API](#tag/Collection) instead.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/getUserScores.in.json",
                "out": {
                    "type": "object"
                }
            }
        }
    }
}